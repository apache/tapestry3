<chapter id="forms">
	<title>Using Forms</title>
	<para>This chapter will introduce you to the way in which Tapestry handles HTML forms. 
	It begins with basics on general form submission, covers server and client side 
	validation and also how to use multiple submit buttons</para>

	<para>The provided example tutorial code groups together the examples shown
	here into a single Tapestry application.  The examples provided will be developed
	in order, so that you can see how additional complexity and validation is added.</para>
	
	<para>The examples that you will firstly accept data from the user (probably you :-), validate
	that data, and then show the results. If there is any error during validation, this will be
	shown on the form and the user will be given the chance to fix the field values
	and re-enter the data.  Note: The validation and error handling functionality is 
	developed as the tutorial progresses so does not exist on the initial pages</para>
	
  	<section id="form-non-validated">
  		<title>Basic non-validated form</title>
	<para>
		Lets begin by creating a form that allows you to enter some information about yourself, 
		which is simply echoed back to you. Initially, we will use straight text fields - 
		but as the tutorial progresses we will replace these with smarter (and cooler!) 
		implementations which include error handling.
	</para>

	<para>The application specification below is used for all examples in this chapter:</para>

	<figure>
	<title>The Application Specification</title>
	<programlisting>
	<para><emphasis>INSERT APP SPEC HERE</emphasis></para>
	</programlisting>
	</figure>
		
	<para>The Home page of this application provides some description of what the application is,
	and some links to various examples. We will skip it here for brevity. It can be found within
	the <filename>examples/tutorial</filename> directory if you wish to view it</para>
	
	<para>The following listing shows the HTML for the first example:</para>
	<figure>
	<title>HTML for Part One</title>
	<programlisting>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;Forms Tutorial&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1&gt;Form Tutorial&lt;/h1&gt;
Enter some fields on this page, and press the submit button. 

&lt;form jwcid="form"&gt;
	&lt;table&gt;
		&lt;tr&gt;
			&lt;td&gt;Your name:&lt;/td&gt;
			&lt;td&gt;&lt;input jwcid="name"&gt;Neil&lt;/input&gt;&lt;/td&gt;
		&lt;/tr&gt;

		&lt;tr&gt;
			&lt;td&gt;Date of birth:&lt;/td&gt;
			&lt;td&gt;&lt;input jwcid="dateOfBirth"/&gt;&lt;/td&gt;
		&lt;/tr&gt;

		&lt;tr&gt;
			&lt;td&gt;Favourite colour:&lt;/td&gt;
			&lt;td&gt;&lt;input jwcid="favColour"/&gt;&lt;/td&gt;
		&lt;/tr&gt;

		&lt;tr&gt;
			&lt;td colspan=2&gt;&lt;input type="submit" jwcid="submit"/&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
	</programlisting>				
	</figure>

We will now write a page specification to handle these fields, using standard InputText fields:
	<figure>
	<title>Page Specification for Part One</title>
	<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- $Id: Home.page,v 1.6 2002/05/13 14:00:37 scornflake Exp $ --&gt;
&lt;!DOCTYPE page-specification PUBLIC 
	"-//Howard Lewis Ship//Tapestry Specification 1.3//EN" 
	"http://tapestry.sf.net/dtd/Tapestry_1_3.dtd"&gt;

&lt;page-specification class="tutorial.forms.Part1"&gt;
	&lt;bean name="delegate" class="net.sf.tapestry.valid.ValidationDelegate"/&gt;

	&lt;component id="form" type="Form"&gt;
		&lt;binding name="delegate" expression="beans.delegate"/&gt;	
	&lt;/component&gt;
	
	&lt;component id="name" type="TextField"&gt;
		&lt;binding name="value" expression="visit.userName"/&gt;
	&lt;/component&gt;
	
	&lt;component id="dateOfBirth" type="TextField"&gt;
		&lt;binding name="value" expression="visit.dateOfBirth"/&gt;
	&lt;/component&gt;

	&lt;component id="favColour" type="TextField"&gt;
		&lt;binding name="value" expression="visit.favoriteColour"/&gt;
	&lt;/component&gt;
	
	&lt;component id="submit" type="Submit"&gt;
		&lt;binding name="listener" expression="listeners.enterDetails"/&gt;
	&lt;/component&gt;
&lt;/page-specification&gt;
	</programlisting>				
	</figure>

	<para>An &InputText; component allows you to show simple &lt;input&gt; HTML tags, and have the value bound 
	to some property of an object. As we have have already seen, Tapestry is capable of getting the value which 
	will appear in the form from almost anywhere. In these examples, we will create a Visit object for the application 
	and bind the form's values to properties on that object. There is however nothing from stopping us using OGNL to 
	bind the component to some other object, (e.g: a static method, or property of some EJB object, for example).
	</para>
	
	<para>For the above specification, we have used simple OGNL bindings.  These will be used to both get the 
	property value when Tapestry renders the form, and also to set the value when the user submits the form.
	</para>
	
	<para>Moving along, lets examine the &Form; component. This has two properties, 
	<varname>delegate</varname> and <varname>listener</varname>.  The <varname>delegate</varname> is used to 
	store validataion error information.  This can be used by your submit handler to see if the form has any errors.
	We have bound the value to <varname>beans.delegate</varname> which is an instance of the Tapestry 
	supplied <varname>ValidationDelegate</varname> class.    This class handles the state required to 
	peform validation and associates error messages with components.</para>
	
	<para>In most applications, you can just use the Tapestry supplied validator - as we have done here.</para>
	
	<para>The second property, <varname>submit</varname> is used to tell Tapestry what method to call 
	on your Java object when the form is submitted.   The expression, <varname>listeners.submit</varname> 
	refers to the <varname>public void submit(IRequestCycle)</varname> method on the page object. </para>
	
	<para>Lastly, there is the actual submit button itself. This is rendered using a &Submit; component,
	which requires only two properties, the lable to use, and the method to call. 
	Here, since we are not implementing a localized version of the form, we will use a <varname>static-binding</varname> 
	for the button label, and we will refer to the same listener method that the form is using.</para>

	<para>Note that it is worth specifying the listener on both the &Form; and &Submit; components, 
	as by doing so the user will be able to use "default submit behavior" on the browser (i.e.: fill in the form and hit enter.)</para>
	
	<para>The Java object for the page and Visit Object is listed below. 
	You should be able to match up the OGNL expressions to JavaBean properties on the form. 
	The submit and form listeners refer to a method, not a property.</para>

	<figure>
	<title>Page1 Java Object, Part One</title>
	<programlisting>
package tutorial.forms;

import net.sf.tapestry.IRequestCycle;
import net.sf.tapestry.RequestCycleException;
import net.sf.tapestry.html.BasePage;

/**
 * Example code for the forms part of Tutorial
 * @author Neil Clayton
 */
public class Part1 extends BasePage {
	public void enterDetails(IRequestCycle cycle) throws RequestCycleException {
		// Submission has been performed. Do something here.
		cycle.setPage("Success");
	}
	
}
	</programlisting>
	</figure>

	<figure>
	<title>The Visit Object, Part One</title>
	<programlisting>
 INSERT VISIT OBJECT HERE WHEN DONE
	</programlisting>
	</figure>


	<para>Compile and run this example. You should see the following form:</para>

    <figure>
      <title>Form Input, Part 1</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/forms-part1-form.gif" format="GIF"/>
	</imageobject>
      </mediaobject>
    </figure>

	<para>When you enter the data and hit the submit button, you should see:</para>

    <figure>
      <title>Form Input, Result - Part 1</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/forms-part1-result.gif" format="GIF"/>
	</imageobject>
      </mediaobject>
    </figure>

	<para>This section has shown basic form field handling using components with no validation. 
	The next section introduces some validation logic, and a method for showing errors on the page.</para>
  	</section>

  	<section id="server-side-validation">
  		<title>Adding Server-side Validation Logic</title>  	

	<para>Many Tapestry components use validators (they implement the <varname>IValidator</varname> interface) - 
	these validators encapsulate specific validation rules, such as 'required, mininum length of 5 and maximum length of 12'.
	Tapestry also provides some default validation implementations, to make life a little easier.</para>
	
	<para>The next example shows a complete page specification using a single StringValidator for the three
	input fields. A StringValidator will accept any string type value. In this example, the only real validation
	will be that a value for every field is that the value is <emphasis>required</emphasis>.  
	The example will also show some new components such 
	as &Delegator;and &Body; which are required in order to support validation. Here is the page specification:</para>

	<figure>
	<title>Component Specification, with StringValidator</title>
	<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- $Id: Home.page,v 1.6 2002/05/13 14:00:37 scornflake Exp $ --&gt;
&lt;!DOCTYPE page-specification PUBLIC 
	"-//Howard Lewis Ship//Tapestry Specification 1.3//EN" 
	"http://tapestry.sf.net/dtd/Tapestry_1_3.dtd"&gt;

&lt;page-specification class="tutorial.forms.Part2"&gt;
	&lt;bean name="delegate" class="net.sf.tapestry.valid.ValidationDelegate"/&gt;

	&lt;bean name="stringValidator" class="net.sf.tapestry.valid.StringValidator" lifecycle="page"&gt;
  		&lt;set-property name="required" expression="true"/&gt;
  		&lt;set-property name="clientScriptingEnabled" expression="false"/&gt;
 	&lt;/bean&gt;

	&lt;component id="form" type="Form"&gt;
		&lt;binding name="delegate" expression="beans.delegate"/&gt;	
	&lt;/component&gt;
	
	&lt;component id="body" type="Body"/&gt;
	
	&lt;component id="name" type="ValidField"&gt;
		&lt;binding name="value" expression="visit.userName"/&gt;
        &lt;binding name="validator" expression='beans.stringValidator'/&gt;
        &lt;static-binding name="displayName"&gt;User name&lt;/static-binding&gt;
	&lt;/component&gt;
	
	&lt;component id="dateOfBirth" type="ValidField"&gt;
		&lt;binding name="value" expression="visit.dateOfBirth"/&gt;
        &lt;binding name="validator" expression='beans.stringValidator'/&gt;
        &lt;static-binding name="displayName"&gt;Date of birth&lt;/static-binding&gt;
	&lt;/component&gt;

	&lt;component id="favColour" type="ValidField"&gt;
		&lt;binding name="value" expression="visit.favoriteColour"/&gt;
        &lt;binding name="validator" expression='beans.stringValidator'/&gt;
        &lt;static-binding name="displayName"&gt;Favorite colour&lt;/static-binding&gt;
	&lt;/component&gt;
	
	&lt;component id="errors" type="Delegator"&gt;
		&lt;binding name="delegate" expression="beans.delegate.firstError"/&gt;
	&lt;/component&gt;
	
	&lt;component id="submit" type="Submit"&gt;
		&lt;binding name="listener" expression="listeners.enterDetails"/&gt;
	&lt;/component&gt;
&lt;/page-specification&gt;
	</programlisting>
	</figure>

	<para>The fields themselves are now &ValidField;s. A ValidField requires two additional properties, 
	<varname>validator</varname> and <varname>displayName</varname>. The first specifies an instance of
	a validator, and the later is used as a textual description of the form element if an error occurs.</para>
	
	<para>The &Body; component is required and used to insert client side validation
	in the form of JavaScript at the top of the page.  Tapestry will provide server side validation
	all the time, and client side validation is possible if the user agent supports JavaScript.</para>

	<para>Finally, in order to show an error with validation on the page, we have added an
	<varname>errors</varname> component, which simply shows the first error.  The &Delegate; 
	component is an easy way to pass the responsibility for rendering to some other object. 
	As the first error of a validator implements &IRender;, we can use the &Delegator; component to 
	include its output into the page during the rendering process.  
	This is of course only one example of presenting errors. It
	would be possible to use an alternative error page, or a custom component to render all errors
	that are present in the validation delegate. The option presented here has been chosen for
	its simplicity.</para>

	<para>Compile and run the example. If you are using the precompiled examples, choose
	the second link on the forms tutorial page. If you ommit a value for any field, you 
	will see an error just above the submit button:</para>

    <figure>
      <title>Form Input, Part 2 - Required fields</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/forms-part2-form.gif" format="GIF"/>
	</imageobject>
      </mediaobject>
    </figure>

The next section shows some more advanced validation
  		
  			
	  	<section id="built-in">
	  		<title>Built in Components</title>
	  	</section>
	  	<section id="contributed-components">
	  		<title>Contributed Components</title>
	  	</section>
	  	<section id="custom-rendering">
	  		<title>Custom Error Rendering</title>
	  	</section>
  	</section>

  	<section id="multi-button">
  		<title>Multiple Submit Buttons</title>
  	</section>

  	<section id="action-and-direct">
  		<title>Action amd Direct Services</title>
  	<section id="stale-link-handling">
  		<title>Handling Stale Links</title>
  	</section>
  	</section>

  	<section id="client-side">
  		<title>Client side validation</title>
  	</section>
  </chapter>
