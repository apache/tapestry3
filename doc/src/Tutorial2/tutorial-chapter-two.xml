<chapter id="getting-started">
	<title>Getting Started</title>
	<section id="tapestry-requirements">
		<title>Requirements</title>
		<para>
			For this tutorial, you need only Tapestry and the included
			contributed components. Of course, we expect that you have already
			deployed the example development environment or tutorial into
			a container.
		</para>
		<para>
			The next section provide a brief summary of how Tapestry works, including
			a little detail on how it processes your request, as well as an introduction
			into the different parts that make up a Tapestry application.
			Feel free to skip this section and proceed to
			<xref linkend="Introductory-examples"/>
			if you already understand what a Page is, and how &OGNL; fits into the picture.
		</para>
	</section>

	<section id="how-does-it-work">
		<title>How does it work?</title>
		<para>
			In a standard Java Web application (using the Servlet API), a request is
			processed as follows:
			<orderedlist>
				<listitem>User agent (browser) sends request over HTTP to server (Servlet Engine)</listitem>
				<listitem>Servlet Engine receives request, and routes it to your servlet</listitem>
				<listitem>Your servlet(s) examine the HTTP content</listitem>
				<listitem>Servlet(s) and JSP are combined to produce the desired result</listitem>
				<listitem>The result is sent back to the user agent (browser)</listitem>
			</orderedlist>
		</para>
		<para>
			This is a somewhat simplified view, as it does not take into account the myriad
			of things that as a developer you are responsible for. For anything but the simplest
			(and hence, not very useful) web application, you will need to consider the
			implementation of:
			<orderedlist>
				<listitem>Session management</listitem>
				<listitem>Implementation of business logic and/or integration with existing 'back end' logic</listitem>
				<listitem>Presentation and 'rendering' of the site or application</listitem>
				<listitem>Maintenance over time</listitem>
				<listitem>Performance</listitem>
				<listitem>Scalability</listitem>
				<listitem>...</listitem>
			</orderedlist>
		</para>
		<para>
			The list goes on. Tapestry provides almost all of the glue to make a Web Application
			happen, so that you can concentrate on implementing the actual logic. Here's how it works:
		</para>
		<para>
			A Tapestry Application consists of a number of Pages, where each page consists of some
			HTML, some Java code, and what is known as a <emphasis>page specification</emphasis>.
			The page specification is what allows you define the dynamic content that makes it's way
			from various Java object into the HTML.
		</para>

		<para>
			When responding to a request, Tapestry does the following:
			<orderedlist>
				<listitem>User agent (browser) sends request over HTTP to server (Servlet Engine)</listitem>
				<listitem>Servlet Engine receives request, and routes it to
					<emphasis>the Tapestry Application</emphasis> servlet</listitem>
				<listitem>The users previous session is restored or created, as appropriate</listitem>
				<listitem>The Application Servlet decodes the request, and calls the
				relevant Java code (defined by you) to both get/set variables or take
				an action (if the request was a form POST, for example)</listitem>
				<listitem>Your application executes code (a method), and sets object
				state.</listitem>
				<listitem>Tapestry inserts the appropriate responses <emphasis>in
				place of</emphasis> the existing HTML, using <emphasis>Components</emphasis></listitem>
				<listitem>The result is sent back to the user agent (browser)</listitem>
			</orderedlist>
			Tapestry is doing much more 'glue' work for you
			than with the standard Servlet/JSP model.  An important concept here
			is that in terms of Java code, you only need to provide the
			<emphasis>data</emphasis> and <emphasis>actions</emphasis> for the web page.
			The actual rendering of this into HTML is put together by Tapestry, using
			the HTML for the page as a basis, with the relevant parts of the page
			being replaced with dynamic content.
		</para>

		<para>
			Finally, Tapestry abstracts the rendering of content from the content
			itself. For example, data for a web based shopping system may be extracted
			by a Java component via JDBC, and presented to Tapestry as a Collection
			of business objects.  Tapestry is then able to take that collection and
			render it into HTML in a way that the page designer (the person who
			create the Pages HTML) specified.
		</para>
		<para>
			The next section shows the simplest Tapestry application - a single page.
		</para>

	</section>

	<section id="simplest-app">
		<title>The Simplest Application</title>
		<para>
			You're close to being able to write some code!
		</para>
		<para>
			Not mentioned in the previous section, but important, is that
			Tapestry applications have at least one mandatory page - called <emphasis>Home</emphasis>.
			This is the page that Tapestry will route new requests to.
		</para>
		<para>
			The following example
			will construct a 'Hello World' application, where the text is
			retreived from the pages Java object. This example will build the
			application specification, basic HTML tempalte (for the Home page),
			and finally a simple Java object to return the 'hello world' string.
		</para>
		<para>
			The example code supplied contains a full implementation of this tutorial.
			Feel free to recreate the tutorial as you go along, using the supplied development
			environment. For each major part of this tutorial, you will find example source code within
			<filename class="directory">c:\Tapestry-x.x\examples\Tutorial\src</filename>.
		</para>
		<para>
			The code for this example is in
			<filename class="directory">c:\Tapestry-x.x\examples\Tutorial\src\tutorial\hello</filename>.
		</para>

		<section id="simplest-app-setup">
			<title>Setup the Application</title>
			<para>
				Every Tapestry Application must have at least a single <emphasis>Application Servlet</emphasis>,
				where the applications pages and other engine services are defined. For this example, create
				a package in your source tree with the name <classname>tutorial.hello</classname>.
				Within this package, create a file called <filename>HelloWorld.application</filename>. This
				is the application specification file.
			</para>
			<para>
				The application specification is a file that is located on the Java class path.
				In a deployed Tapestry application, the specification lives with the application's
				class files, in the	<filename class="directory">WEB-INF/classes</filename> directory
				of a War file.
			</para>
      <figure>
        <title>HelloWorld.application</title>
        <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE application PUBLIC
  "-//Howard Lewis Ship//Tapestry Specification 1.3//EN"
  "http://tapestry.sf.net/dtd/Tapestry_1_3.dtd"&gt;
&lt;application
  name="Hello World Tutorial"
  engine-class="net.sf.tapestry.engine.&SimpleEngine;"&gt;
  &lt;page name="Home" specification-path="/tapestry/tutorial/hello/Home.page"/&gt;
&lt;/application&gt;
</programlisting>
      </figure>
			<para>
				This specification defines a Tapestry Application using the standard Tapestry Engine
				(documented later), and a single page called <emphasis>Home</emphasis>,
				which Tapestry expects to find at <filename>/tapestry/tutorial/hello/Home.page</filename>
				on the classpath.
			</para>
			<para>
				The last <emphasis>application related</emphasis> configuration we need (before we can work on
				the page content itself), is to provide the Servlet engine configuration.
				Within the <filename class="directory">WEB-INF</filename> directory is a
				file called <filename>web.xml</filename>. This file should have at least the following
				content:
      <figure>
        <title>Servet Configuration (web.xml)</title>
        <programlisting>
&lt;web-app&gt;
  &lt;display-name&gt;Tapestry Tutorial&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;
    &lt;servlet-class&gt;tutorial.hello.HelloWorldServlet&lt;/servlet-class&gt;
  	&lt;load-on-startup&gt;0&lt;/load-on-startup&gt;
  &lt;/servlet&gt;
  
	&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

  &lt;session-config&gt;
  	&lt;session-timeout&gt;15&lt;/session-timeout&gt;
  &lt;/session-config&gt;

  &lt;welcome-file-list&gt;
    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;
&lt;/web-app&gt;
</programlisting>
      </figure>
			Depending on the <filename>web.xml</filename> you are looking at, there may be
			more than this (specifically, the definition of further servlets). That's fine - as long
			as there is a definition for the <classname>HelloWorldServlet</classname>.
			</para>
		</section>
		<section id="simplest-app-thehtml">
			<title>The Home Page HTML</title>
			<para>
				With the basic application specification itself complete, we can now define the
				HTML on the main page. This HTML file is a Tapestry resource, and for this tutorial
				should reside	in the source directory for the application.
				<footnote>
					<para>The tutorial is setup to copy .html, .page and .application files to the classpath - as
					such, these files will be loadable by Tapestry at runtime</para>
				</footnote>
				It should have the same filename as the Page name, in this case it is called <filename>
				Home.html</filename>, and is in
				 <filename class="directory">c:\Tapestry-x.x\examples\Tutorial\src\tutorial\hello</filename>.
      <figure>
        <title>The HTML Content (Home.html)</title>
        <programlisting>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;Hello World&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
Welcome to your first &lt;b&gt;Tapestry Application&lt;/b&gt;
&lt;p&gt;
&lt;h1&gt;
	&lt;span jwcid="hellotext"/&gt;
&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</programlisting>
      </figure>
			</para>
			<para>
				You will notice that the page is completely normal, apart from the single
				<emphasis>span </emphasis> tag, which contains an attribute with name
				<varname>jwcid</varname>.  This is how Tapestry inserts dynamic data
				into a page. Tapestry will completely replace the <emphasis>span </emphasis>
				tag, including its contents when it renders the page.
				<footnote>
					<para>The tag does not have to be a span tag. Don't worry about it now, it will be covered later.</para>
				</footnote>
			</para>
		</section>
		<section id="simplest-app-thejavaobject">
			<title>The Java Object</title>
			<para>
				With the page definition completed, we will create the Java Object that
				is related to this page. This object will simply supply some static text
				to the HTML template.
			</para>
     <figure>
        <title>The Java Object (Home.java)</title>
        <programlisting>
package tutorial.hello;

import net.sf.tapestry.html.BasePage;

public class Home extends BasePage
{
	public String getSomeText()
	{
		return "It's a brave new world!";
	}
}
</programlisting>
      </figure>
		</section>
		<section id="simplest-app-pagespec">
			<title>The Page Specification</title>
			<para>
				Almost there! The last step is to tie the capabilities of the Java Object,
				into the HTML. The final piece of the puzzle is the <emphasis>page
				specification</emphasis>.
			</para>
			<para>
				Again, this file should be with the .html and .java files, in the source directory
				for this tutorial example.
			</para>
     <figure>
        <title>The Page Specification (Home.page)</title>
        <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- $Id$ --&gt;
&lt;!DOCTYPE page-specification PUBLIC
	"-//Howard Lewis Ship//Tapestry Specification 1.3//EN"
	"http://tapestry.sf.net/dtd/Tapestry_1_3.dtd"&gt;

&lt;page-specification class="tutorial.hello.Home"&gt;
	&lt;component id="hellotext" type="Insert"&gt;
		&lt;binding name="value" expression="someText"/&gt;
	&lt;/component&gt;
&lt;/page-specification&gt;
</programlisting>
      </figure>
			<para>
				Thats it!  You can execute <emphasis>ant run</emphasis> to both
				compile, package and run the Web Application. Go to
	    <ulink url="http://localhost:8081/learn-tapestry/hello">
	      <filename>http://localhost:8081/learn-tapestry/hello</filename>
	    </ulink> to see the result.

			<figure>
        <title>Hello World Application</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/helloworld-example.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

			</para>
		</section>
		<section id="simplest-app-summary">
			<title>Summary</title>
			<para>
			What have we done?
			<orderedlist>
				<listitem>We have seen that an application requires a specification file, which lists
				the pages of the application. The application specification is required for any Tapestry
				app.</listitem>
				<listitem>That pages are defined in terms of an HTML file (the content), a Page file
				(which ties the content to the Java Object) and finally the Java Object for the page
				logic.</listitem>
				<listitem>That a Tapestry application, consisting of any number of pages is
				controlled by a single servlet</listitem>
				<listitem>Built an example which uses both static content, and content
				from a java object</listitem>
			</orderedlist>
			</para>
			<para>
				The next section details the separate parts of a Tapestry application in more detail.
			</para>
		</section>
	</section>

	<section id="diff-parts">
		<title>Different Parts of a Tapestry Application</title>
		<section id="part-app-comp">
			<title>Application Component</title>
		</section>
		<section id="part-pages">
			<title>Pages</title>
		</section>
		<section id="part-template">
			<title>Component Template</title>
		</section>
		<section id="part-logic">
			<title>Application Logic</title>
		</section>
		Some text here
	</section>
</chapter>

