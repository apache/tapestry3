<!-- $Id$ -->

<appendix id="faq">
	<title>Frequently Asked Questions</>
	
<para>
This section contains a few Q's and A's gleemed from the 
<ulink url="http://sourceforge.net/forum/forum.php?forum_id=14493">Tapestry forums at SourceForge</>.
</>


<qandaset defaultlabel="qanda">

<qandaentry>
	<question>
		<para>
		<classname>java.lang.NoSuchMethodError</> gets thrown
		when I attempt to use Tapestry with Tomcat.  How do I fix this?
		</>
	</>
	<answer>
		<para>
	<ulink url="http://jakarta.apache.org/tomcat/index.html">Tomcat</> ships with version 1.0 of the 
	<ulink url="http://java.sun.com/xml/xml_jaxp.html">JAXP (Java API for XML Processing)</> 
	framework.  Tapestry is coded against version 1.1.  You must replace the
	<filename>jaxp.jar</> in Tomcat (or WebLogic) with the
	<filename>javax.xml.jaxp.jar</> from Tapestry.  Simply delete the old file
	and copy the new one into the Tomcat distribution.
		</>
		
		<para>
		In addition you must replace <filename>parser.jar</> (which contains
		an XML parser) with
		<filename>org.apache.crimson.jar</>, Sun's default XML parser.
		</>
	</>
</qandaentry>

<qandaentry>
	<question>
		<para>Can Tapestry be used to create a Portal application?</>
	</>
	<answer>
		<para>
		Of course it can!
		</>
		<para>
		This question came up pretty frequently on the SourceForge forum, so
		I put together a mini-portal application as one of the tutorials.  This sounded
		out some limitations in the framework: the <classname>Porlet</> component
		dynamically combines components from multiple pages (using the &Block; and
		&InsertBlock; components).
		</>
	</>
</>

<qandaentry>
	<question>
		<para>
		Why does Tapestry use the JBE instead of Ant?
		</>
	</>
	<answer>
		<para>
		<ulink url="http://jakarta.apache.org/ant/index.html">Ant</> was not available 
		when Tapestry was first written.  
		The <ulink url="../JBE/JBE.html">Java Build Environment</> (JBE)
		is built around GNU Make, which has a pretty proven track record.
		It has not been a priority
		to determine if converting from JBE to Ant is worthwhile.
		
<note>
	<para>
	The big downside to using the JBE is the requirement to have 
	<ulink url="http://sources.redhat.com/cygwin/">Cygwin</> (the GNU emulation
	environment for Windows) available.  Folks without a fast Internet connection are
	really hurt by the 30MB or more of downloads required.
	</>
	<para>
	I have yet to learn everything about Ant, but I did find the Ant build files to
	be uglier, more procedurable and less declarative.  The JBE Makefiles (the ones you
	create for your projects) tend to be very declarative, you mostly just indicate
	the names of your packages and the paths for your libraries.
	</>
	<para>
	At some point, combining JBE declarative functionality with Ant seems like
	a good idea; it's just a matter of finding the time.
	</>
</>
	</>
	</>
</>

<qandaentry>
	<question>
		<para>
		One more time.  What's this business about rewinding things for forms?
		</>
	</>
	<answer>
		<para>
		This is one of the big stumbling blocks for some users of Tapestry.
		The way Tapestry deals with forms is very complex, with a reason: it allows
		for incredibly dynamic pages.
		</>
		
		<para>
		In tradional web applilcations, the developer is responsible for
		naming each form element, as well as writing a servlet to
		handle the request cycle when the form is submitted.  That turns into
		a lot of code to extract name parameters from the &HttpServletRequest;, 
		convert them from Strings to other datatypes, and push the values
		into appropriate business objects.
		</>
		
		<para>
		This works fine as far as it goes ... but the developer has an advantage 
		that the Tapestry framework doesn't have:  the exact name, type and number
		of form elements is known during development.
		</>
		
		<para>
		By contrast, Tapestry has to figure this all out on the fly.  In addition,
		Tapestry forms can wrap around &Foreach; components ... that means the same
		&TextField; component may be responsible for updating a property of
		a whole slew of objects.  On top of that, the use
		of &Conditional;, &Block; and &InsertBlock; components
		mean that the exact set of components involved may be determined dynamically.
		</>
		
		<note>
			<para>
			An example of this is the 
			<link linkend="inspector.logging">Tapestry Inspector Logging View</>.  A single
			&PropertySelection; is wrapped by a &Foreach; which iterates throught
			a list of the possible categories.
			</>
			
			<para>
			Categories may be added at any time (in fact, that's another function
			of the page).
			</>
		</>
		<para>
		Now, it's natural to envision Tapestry dynamically walking through its components
		and HTML templates to render the form seen in the user's web browser.  The
		mental leap required is that
		the initial renderring process has to be <emphasis>run again</> in order to figure out
		which components are involved in processing the submission, and how.  That's
		the <emphasis>rewind phase</>.
		</>
		
		<para>
		Just as with the initial render, Tapestry must work through 
		just the right set of components, in just the right order, taking into account
		&Conditional; and &Foreach; components.  You must also factor in that Tapestry is
		assigning the names used for the HTML form elements, which must also be "rediscovered"
		so that the right HTTP parameter can be combined with the correct component and
		assigned to the appropriate business object property.
		</>
		
		<para>
		Sure, this is overkill when you have a simple form to enter the user's name.
		But doesn't it give you a warm feeling to know that when you do create
		your killer dynamic form, the <emphasis>very same code</> you've come to know
		and trust will be waiting to handle it, just as easily?
		</>

	</answer>
</qandaentry>

</qandaset>

</appendix>
