<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!--

The DTD for Tapestry application and component specifications.  Associated with the public identifier:

	-//Primix Solutions//Tapestry Specification 1.0//EN
	
For application specifications, the main element is application.

For component specifications the main element is specification.

-->

<!--

Element: alias
Contained by: component-alias

The short name for a component.  This name is available to
all component specifications in the application.

-->

<!ELEMENT alias (#PCDATA)>

<!--

Element: alias
Contained by: specification
Value: "true" or "false"

Determines whether the component may have a body (may
wrap other elements and components).  If not specified,
the default value is "true".

-->

<!ELEMENT allow-body (#PCDATA)>

<!--

Element: allow-informal-parameters
Contained by: specification
Value: "true" or "false"

If false, component may only have bindings for formal parameters.
If true (the default, if not specified), informal bindings are allowed.
Typically, informal bindings become additional HTML attributes.

-->

<!ELEMENT allow-informal-parameters (#PCDATA)>

<!--

Element: application

The root element for application specifications.

-->

<!ELEMENT application (name, engine-class, page+, component-alias*, properties?)>

<!--

Element: assets
Contained by: specification

Container for asset specifications.

-->

<!ELEMENT assets (internal-asset | context-asset| external-asset | private-asset)+>

<!--

Element: binding
Contained by: bindings

Creates a binding between a component parameter and a propery path
(relative to the container, the component defined by this specification).

-->

<!ELEMENT binding (name, property-path)>

<!--

Element: bindings
Contained by: component

Container for the binding elements.

-->

<!ELEMENT bindings (binding | static-binding | inherited-binding | field-binding)+>

<!--

Element: class
Contained by: specification

Defines the Java class to instantiate for the component.

-->

<!ELEMENT class (#PCDATA)>

<!--

Element: component
Contained by: components

Defines a component contained by component being specified.

-->

<!ELEMENT component (id, type, bindings?)>

<!--

Element: components
Contained by: specification

Defines a list of components contained by the component
being specified.

-->

<!ELEMENT components (component)+>

<!--

Element: component-alias
Contained by: application

Defines an alias for a component specification path.  This
alias is available to all pages in the application.

-->

<!ELEMENT component-alias (alias, specification-path)>

<!--

Element: context-asset
Contained by: assets

Defines an asset contained by the servlet context (i.e., inside
the web application archive).  The path given is relative to the
servlet context root, and should start with a leading slash.
Internal assets may be localized.

This element replaces the deprecated "internal-asset" element.

-->

<!ELEMENT context-asset (name, path)>

<!--

Element: engine-class
Contained by: application

The Java class to instantiate for the application engine.

-->

<!ELEMENT engine-class (#PCDATA)>

<!--

Element: external-asset
Contained by: assets

The URL of an asset at some arbitrary location; such URLs are inserted
as is into the HTML.

-->

<!ELEMENT external-asset (name, URL)>

<!--

Element: field-binding
Contained by: bindings

Used to bind a parameter to a static field of some class.

-->

<!ELEMENT field-binding (name, field-name)>

<!--

Element: field-name
Contained by: field-binding

The complete name of a static field, including package name, Java class
and the name of the field.  If the package is "java.lang" then it may
be ommitted.

Examples: Boolean.TRUE, com.primix.tapestry.IEngineService.HOME_SERVICE

-->

<!ELEMENT field-name (#PCDATA)>

<!--

Element: id
Contained by: component

The id for the component, which must be unique (within the
specification) and must match a <jwc> tag from the template
(if there is a template).

-->

<!ELEMENT id (#PCDATA)>

<!--

Element: inherited-binding
Contained by: bindings

Uses a binding of the container as a binding for the contained
component.

-->

<!ELEMENT inherited-binding (name, parameter-name)>

<!--

Element: internal-asset
Contained by: assets
Note: deprecated, replaced with context-asset

-->

<!ELEMENT internal-asset (name, path)>

<!--

Element: java-type
Contained by: parameter

Defines the type of property the parameter should be bound to.
This is not used by the framework, however.

-->

<!ELEMENT java-type (#PCDATA)>

<!--

Element: name
Contained by: binding, context-asset, external-asset, field-binding,
	inherited-binding, internal-asset, page,
	parameter, private-asset, property, static-binding

-->

<!ELEMENT name (#PCDATA)>

<!--

Element: page
Contained by: application

Defines a single page of the application.

-->

<!ELEMENT page (name, specification-path)>

<!--

Element: parameter
Contained by: parameters

Defines a formal parameter for the component.

-->

<!ELEMENT parameter (name, java-type?, required?)>

<!--

Element: parameters
Contained by: specification

Container for parameter information.

-->

<!ELEMENT parameters (allow-informal-parameters?, parameter*)>

<!--

Element: parameter-name
Container: inherited-binding

The name of the container's parameter that should be used
as the binding for the contained component's parameter.

-->

<!ELEMENT parameter-name (#PCDATA)>

<!--

Element: path
Container: internal-asset, context-asset

The path, relative to the servlet context, of the asset.

-->

<!ELEMENT path (#PCDATA)>

<!--

Element: private-asset
Contained by: assets

Defines an asset that is dynamically extracted from the classpath.

-->

<!ELEMENT private-asset (name, resource-path)>

<!--

Element: properties
Contained by: application, specification

Container for a set of name/value property pairs.  Properties are used
to capture information that doesn't fit into the DTD.

-->

<!ELEMENT properties (property)+>

<!--

Element: property
Contained by: properties

A name / value property pair.

-->

<!ELEMENT property (name, value)>

<!--

Element: property-path
Contained by: binding

The property path (a property name, or a series of property names seperated by periods).

-->

<!ELEMENT property-path (#PCDATA)>

<!--

Element: required
Contained by: parameter
Value: "true" or "false"

If true, the parameter must be bound.  If false (the default, if not specified), the parameter
is optional.

-->

<!ELEMENT required (#PCDATA)>

<!--

Element: resource-path
Contained by: private-asset

The path for the resource, within the classpath.

-->

<!ELEMENT resource-path (#PCDATA)>

<!--

Element: specification

Root element for component (and page) specifications.

-->

<!ELEMENT specification (class, allow-body?, parameters?, components?, assets?, properties?)>

<!--

Element: specification-path
Contained by: page

-->

<!ELEMENT specification-path (#PCDATA)>

<!--

Element: static-binding
Contained by: bindings

Defines a static binding, whose value is defined inline within the specification.

-->

<!ELEMENT static-binding (name, value)>

<!--

Element: type
Contained by: component

The type (alias or specification path) of the contained component.

-->

<!ELEMENT type (#PCDATA)>

<!--

Element: URL
Contained by: external-asset

The URL for the asset.  The URL is inserted into the HTML as-is (it doesn't have to be
a complete URL, but generally should not be a relative URL, because of how Tapestry
generates URLs for pages).

-->

<!ELEMENT URL (#PCDATA)>

<!--

Element: value
Contained by: static-binding

The value for the binding.  This may be interpreted in different ways (converted to
a boolean, integer or double).

-->

<!ELEMENT value (#PCDATA)>
