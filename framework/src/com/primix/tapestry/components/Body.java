package com.primix.tapestry.components;

import java.io.*;
import com.primix.tapestry.*;
import com.primix.tapestry.spec.*;
import java.util.*;

/*
 * Tapestry Web Application Framework
 * Copyright (c) 2000 by Howard Ship and Primix Solutions
 *
 * Primix Solutions
 * One Arsenal Marketplace
 * Watertown, MA 02472
 * http://www.primix.com
 * mailto:hship@primix.com
 * 
 * This library is free software.
 * 
 * You may redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation.
 *
 * Version 2.1 of the license should be included with this distribution in
 * the file LICENSE, as well as License.html. If the license is not
 * included with this distribution, you may find a copy at the FSF web
 * site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139 USA.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 *  The body of a Tapestry page.  This is used since it allows components on the
 *  page access to an initialization function (that is written at the end, just before
 *  the &lt;/body&gt; tag).  This is current used by {@link Rollover}.
 *
 *  @author Howard Ship
 *  @version $Id$
 */


public class Body extends AbstractComponent
{
	private List imageLines;
	private List otherFunctions;
	private int uniqueId;
	private List otherScript;

	private static final String ATTRIBUTE_NAME = 
		"com.primix.tapestry.components.Body";

	private static final String[] reservedNames = { "onLoad" };

	public Body(IPage page, IComponent container, String id, 
		ComponentSpecification specification)
	{
		super(page, container, id, specification);
	}

	/**
	*  Adds to the script an initialization for the named variable as
	*  an Image(), to the given URL.
	*
	*/

	public void addImageInitialization(String imageName, String URL)
	{
		String variableName;

		if (imageLines == null)
			imageLines = new ArrayList();

		variableName = "tapestry_preload['" + imageName + "']";

		imageLines.add(variableName + " = new Image()");
		imageLines.add(variableName + ".src = \"" + URL + '"');
	}

	/**
	*  Adds a call to the function (which must have no arguments) to
	*  perform its initialization.  The function call will be included
	*  in the <code>onLoad</code> event handler generated for the &lt;BODY&gt;
	*  element.
	*
	*/

	public void addOtherInitialization(String functionName)
	{
		if (otherFunctions == null)
			otherFunctions = new ArrayList();

		otherFunctions.add(functionName);
	}

	/**
	 *  Adds additional scripting code to the page.  This code
	 *  will be added to a large block of scripting code at the
	 *  end of the page (i.e., the end of the <code>Body</code>'s
	 *  contribution).
	 *
	 *  <p>This is typically used to add some form of JavaScript
	 *  event handler to a page.  For example, the
	 *  {@link Rollover} component makes use of this.
	 *
	 *  <p>The string will be added, as-is, within
	 *  the &lt;script&gt; block generated by this <code>Body</code> component.
	 *  The script should <em>not</em> contain HTML comments, those will
	 *  be supplied by the Body component.
	 *
	 */
	 
	public void addOtherScript(String script)
	{
		if (otherScript == null)
			otherScript = new ArrayList();
		
		otherScript.add(script);
	}
		
	 
	/**
	*  Retrieves the <code>Body</code> that was stored into the
	*  request cycle.  This allows components wrapped by the
	*  <code>Body</code> to locate it and access the services it
	*  provides.
	*
	*/

	public static Body get(IRequestCycle cycle)
	{
		return (Body)cycle.getAttribute(ATTRIBUTE_NAME);
	}

	/**
	*  Returns a reference to the initialized image.  The returned
	*  value is a String, suitable for insertion into a script, that
	*  provides the URL of the image.  The value is quoted if that is
	*  necesary.  This localizes how the scripts built by this
	*  component work.
	*
	*/

	public String getInitializedImage(String imageName)
	{
		return "tapestry_preload['" + imageName + "'].src";
	}

	public String getUniqueId()
	{
		return Integer.toString(uniqueId++);
	}

	public void render(IResponseWriter writer, IRequestCycle cycle) 
	throws RequestCycleException
	{
		String onLoadName;

		if (cycle.getAttribute(ATTRIBUTE_NAME) != null)
			throw new RequestCycleException(
				"Body components may not be nested.",
				this, cycle);

		cycle.setAttribute(ATTRIBUTE_NAME, this);

		imageLines = null;
		otherFunctions = null;
		uniqueId = 0;

		try
		{
			onLoadName = "onLoad_" + getIdPath().replace('.', '_');

			writer.begin("body");

			writer.attribute("onLoad", "javascript:" + onLoadName + "();");

			generateAttributes(cycle, writer, reservedNames);

			renderWrapped(writer, cycle);

			// The script gets written at the end of the page, but that's
			// OK, since it is referenced by an onLoad event handler.

			writeScript(onLoadName, writer);

			writer.end(); // <body>
		}
		finally
		{
			imageLines = null;
			otherFunctions = null;
			otherScript = null;
		}

	}

	/**
	*  Writes a script that initializes any images and calls any
	*  additional JavaScript functions, as set by {@link
	*  #addImageInitialization(String, String)} and {@link
	*  #addOtherInitialization(String)}.
	*
	*  <P>A Body component always writes this script, even if it is
	*  empty.  That's related to render order; it writes the onLoad
	*  event handler into the &lt;body&gt; tag before it knows if any
	*  components will need these services.
	*/


	protected void writeScript(String scriptName, IResponseWriter writer)
	{
		StringBuffer buffer;
		Iterator i;
		String line;
		String script;

		buffer = new StringBuffer();

		buffer.append("\n\n");

		if (imageLines != null)
			buffer.append("  var tapestry_preload = new Array();\n\n");

		buffer.append("  function ");
		buffer.append(scriptName);
		buffer.append(" ()\n" +
			"  {\n");

		if (imageLines != null)
		{
			buffer.append("    if (document.images)\n" +
				"    {\n");

			i = imageLines.iterator();
			while (i.hasNext())
			{
				line = (String)i.next();

				buffer.append("      ");
				buffer.append(line);
				buffer.append(";\n");
			}

			buffer.append("    }\n\n");
		}

		if (otherFunctions != null)
		{
			i = otherFunctions.iterator();
			while (i.hasNext())
			{
				line = (String)i.next();

				buffer.append("    ");
				buffer.append(line);
				buffer.append("();\n\n");
			}
		}

		buffer.append("\n  }");

		writer.begin("script");
		writer.attribute("language", "javascript");

		writer.printRaw("<!--\n");

		// Print out all the stuff related to pre-loading images.
		
		writer.printRaw(buffer.toString());

		// If there are other scripts (from Rollovers, or whatever),
		// emit them now.
		
		if (otherScript != null)
		{
			i = otherScript.iterator();
			while (i.hasNext())
			{
				script = (String)i.next();
				
				writer.printRaw("\n\n");
				writer.printRaw(script);
			}
		}

		// Now, close the HTML comment (used to fake out archaic browsers) and
		// the <SCRIPT> element.

		writer.printRaw("\n\n// -->");
		
		writer.end(); // <script>
	}
}
