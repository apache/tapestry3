package com.primix.tapestry;

import java.io.IOException;
import javax.servlet.*;
import com.primix.tapestry.parse.ComponentTemplate;
import com.primix.tapestry.parse.TemplateToken;
import java.util.Locale;
import com.primix.tapestry.spec.ApplicationSpecification;
import com.primix.tapestry.components.*;
import java.net.*;

/*
 * Tapestry Web Application Framework
 * Copyright (c) 2000 by Howard Ship and Primix Solutions
 *
 * Primix Solutions
 * One Arsenal Marketplace
 * Watertown, MA 02472
 * http://www.primix.com
 * mailto:hship@primix.com
 * 
 * This library is free software.
 * 
 * You may redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation.
 *
 * Version 2.1 of the license should be included with this distribution in
 * the file LICENSE, as well as License.html. If the license is not
 * included with this distribution, you may find a copy at the FSF web
 * site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139 USA.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 */

/**
 * Defines the core, session-persistant object used to run a Tapestry
 * application for a single client (each client will have an instance of the object).
 *
 * <p>An application provides a central location to store business logic and
 * globally important information.  It also defines provides the page recorders,
 * page source, specification source and template source to the pages, components and
 * (most imporantly) the request cycle
 *  ({@link IRequestCycle}).   By providing specific
 * implementations of these interfaces, it defines the <b>strategy</b> used to
 * store persistant server-side client information between request cycles.
 *
 * <p>An application must define a minimum of four pages:
 * <dl>
 *   <dt>home</td>
 *	 <dd>The initial page presented to the user.</dd>
 *   <dt>exception</td>
 *   <dd>A page used when reporting exceptions.  This page must define a writable
 *   JavaBean property named 'exception'.</dd>
 *   <dt>stale-link</dt>
 *   <dd>A page displayed when a stale action link is triggered (a stale link is a link
 *   generated by an old version of a page when the page's state has subsequently changed).
 *  <dt>stale-session</dt>
 *  <dd>A page displayed when a session is deleted due to inactivity.</dd>
 * </dl>
 *
 * @author Howard Ship
 * @version $Id$
 */

public interface IApplication
{
    /**
     *  The name ("Home") of the default page presented when a user first accesses the
     *  application.
     *
     */
	 
    public static final String HOME_PAGE = "Home";

    /**
     *  The name ("Exception") of the page used for reporting exceptions.  
	 *  <p>Such a page must have
     *  a writable JavaBeans property named 'exception' of type 
     * <code>java.lang.Throwable</code>.
     *
     */

    public static final String EXCEPTION_PAGE = "Exception";

    /**
     *  The name ("StaleLink") of the page used for reporting stale links.
     *
     */

    public static final String STALE_LINK_PAGE = "StaleLink";

    /**
     *  The name ("StaleSession") of the page used for reporting state sessions.
     *
     */

    public static final String STALE_SESSION_PAGE = "StaleSession";
	
    /**
     *  Forgets changes to the named page by discarding the page recorder for the page.
     *  This is used when transitioning from one part
     *  of an application to another.  All property changes for the page are lost.
     *
     *  <p>Throws an {@link ApplicationRuntimeException} if there are uncommitted changes
     *  for the recorder (in the current request cycle).
     *
     */
  
    public void forgetPage(String name);

    /**
     *  Returns the desired Locale for the application.  This is determined when the
     *  application instance is first created.  The locale is determined from the client
     *  web browser.
     *
     */
 
    public Locale getLocale();

    /**
     *  Returns a recorder for a page.  Creates it as necessary, or reuses an existing
     *  recorder.
     *
     */
 
    public IPageRecorder getPageRecorder(String pageName);

    /**
     *  Returns the object used to load a page from it's specification.
     *
     */
 
    public IPageSource getPageSource();

    /**
     *  Gets the named service, or throws an {@link
     *  ApplicationRuntimeException} if the application can't provide
     *  the named server.
     *
     *  <p>The object returned has a short lifecycle (it isn't
     *  serialized with the application).  Repeated calls with the
     *  same name are not guarenteed to return the same object,
     *  especially in different request cycles.
     *
     */
 
    public IApplicationService getService(String name);

    /**
     *  Returns the URL prefix that corresponds to the servlet for the application.  
     *  This is required by instances of {@link IApplicationService} that need 
     *  to construct URLs for the application.  This value will include
     *  the context path.
     */
 
    public String getServletPrefix();

    /**
     *  Returns the context path, a string which is prepended to the names of
     *  any assets or servlets.  This may be the empty string, but won't be null.
     *
     *  <p>This value is obtained from {@link HttpServletRequest#getContextPath()}.
     */

    public String getContextPath();

    /**
     *  Returns the application specification that defines the application
     *  and its pages.
     *
     */
 
    public ApplicationSpecification getSpecification();

    /**
     *  Returns the source of all component specifications for the application.  
     *  The source
     *  is typically shared between sessions and even between different applications.
     *
     */
 
    public ISpecificationSource getSpecificationSource();

    public ITemplateSource getTemplateSource();

    /**
     *  Method invoked from the {@link ApplicationServlet} to perform processing of the
     *  request.
     *
     */
 
    public void service(RequestContext context)
	throws ServletException, IOException;

	/**
     *  Returns an object that can resolve resources and classes.
     *
     */
     
	public IResourceResolver getResourceResolver();
}
