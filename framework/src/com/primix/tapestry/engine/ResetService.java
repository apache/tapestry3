/*
 * Tapestry Web Application Framework
 * Copyright (c) 2000-2002 by Howard Lewis Ship
 *
 * Howard Lewis Ship
 * http://sf.net/projects/tapestry
 * mailto:hship@users.sf.net
 *
 * This library is free software.
 *
 * You may redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation.
 *
 * Version 2.1 of the license should be included with this distribution in
 * the file LICENSE, as well as License.html. If the license is not
 * included with this distribution, you may find a copy at the FSF web
 * site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139 USA.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied waranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 */

package com.primix.tapestry.engine;

import java.io.IOException;

import javax.servlet.ServletException;

import com.primix.tapestry.Gesture;
import com.primix.tapestry.IComponent;
import com.primix.tapestry.IEngineServiceView;
import com.primix.tapestry.IPage;
import com.primix.tapestry.IRequestCycle;
import com.primix.tapestry.RequestCycleException;
import com.primix.tapestry.ResponseOutputStream;
import com.primix.tapestry.Tapestry;

/**
 *  Service used to discard all cached data (templates, specifications, et cetera).
 *  This is primarily used during development.  It could be a weakness of a Tapestry
 *  application, making it susceptible to denial of service attacks, which is why
 *  it is disabled by default.  The link generated by the ResetService redisplays the
 *  current page after discarding all data.
 *
 *  @author Howard Lewis Ship
 *  @version $Id$
 *  @since 1.0.9
 *  @see IEngine#isResetServiceEnabled()
 */

public class ResetService extends AbstractService
{

	public Gesture buildGesture(
		IRequestCycle cycle,
		IComponent component,
		String[] parameters)
	{
		if (parameters != null && parameters.length > 0)
			throw new IllegalArgumentException(
				Tapestry.getString("service-no-parameters", RESET_SERVICE));

		String[] context = provideString(1);
		context[0] = component.getPage().getName();

		Gesture result = assembleGesture(cycle, RESET_SERVICE, context, null);

		discard(context);

		return result;
	}

	public String getName()
	{
		return RESET_SERVICE;
	}

	public boolean service(
		IEngineServiceView engine,
		IRequestCycle cycle,
		ResponseOutputStream output)
		throws RequestCycleException, ServletException, IOException
	{
		String[] context = getServiceContext(cycle.getRequestContext());
		String pageName = context[0];

		if (engine.isResetServiceEnabled())
			engine.clearCachedData();

		IPage page = cycle.getPage(pageName);

		page.validate(cycle);

		cycle.setPage(page);

		// Render the same page (that contained the reset link).

		engine.renderResponse(cycle, output);

		return true;
	}

}