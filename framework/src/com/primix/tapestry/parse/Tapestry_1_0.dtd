<!--
This is the DTD used for the Tapestry 1.0 application and component specifications.

For application specifications, the top level element is application.
For component specifications, the top-level element is specification.

Several elements accept a boolean value.  The following values are allowed:
	True, False, yes, no, t, f, y, n, on, off, 1, 0
Case is ignored.
-->

	<!--
	A short mnuemonic name for a frequently used component.

	Used in: component-alias
	-->
<!ELEMENT alias (#PCDATA)>

	<!--
	Indicates whether or not the component can wrap other components or
	HTML elements.  By defaults, components may wrap.

	The value should be convertable to a boolean value.  See notes above.

	Used in: specification
	-->
<!ELEMENT allow-body (#PCDATA)>

	<!--
	Indicates whether the component can allow informal parameters (unspecified
	parameters that are used as additional HTML attributes).  This defaults
	to true.

	The value should be convertable to a boolean value.  See notes above.

	Used in: specification
	-->
<!ELEMENT allow-informal-parameters (#PCDATA)>

  
	<!--
	The top-level element in an application specification.
	-->
<!ELEMENT application (name, page+, component-alias*, property*)>

	<!--
	The size of the buffer used when rendering the page.  No
	output is returned to the client until the buffer overflows
	or the entire render is complete.  This is used to prevent
	partial pages from being presented to the client when the page
	render is interrupted by an exception (and the exception page
	is invoked to present the exception).

	The buffer size is a integer followed by an optional 'k' or 'm' suffix.
	A number alone is in bytes, a 'k' converts it to kilobytes, an 'm'
	converts it to megabytes.

	Used in: page
	-->
<!ELEMENT buffer-size (#PCDATA)>


	<!--
	A binding based on a property.

	Use in: component
	-->
<!ELEMENT binding (name, property-path)>

	<!--
	A fully qualified class name used to instantiate the component.

	Used in: specification
	-->
<!ELEMENT class (#PCDATA)>

	<!--
	Defines a component embedded within another component.  Each component
	referenced in the containing component's template must have a corresponding
	component entity defined in its specification.

	Used in: specification
	-->
<!ELEMENT component (id, type, 
				     (binding?, static-binding?, inherited-binding?)*, 
					 property*)>

	<!--
	Used to define an application-wide alias for a particular component.
	This is useful for widely used components such as navigational borders.

	Used in: application
	-->
<!ELEMENT component-alias (alias, specification-path)>

	<!--
	An external asset at an arbitrary URL.

	Used in: specification
	-->
<!ELEMENT external-asset (name, URL)>

	<!--
	An identifier for a contained component.

	Used in: component
	-->
<!ELEMENT id (#PCDATA)>

	<!--
	Specifies that a contained component shares a parameter with its container
	(even if null).  At runtime, both components will share the same binding
	object.  This allows for a lot of simple aggregation without code.

	Used in: component
	-->
<!ELEMENT inherited-binding (name, parameter-name)>

	<!--
	The path within the servlet context to a URL; this is used with
	assets distributed with the servlet inside a web application file.

	Used in: specification
	-->
<!ELEMENT internal-asset (name, path)>

	<!--
	Specifies the Java type of a parameter.  When not specified, this defaults
	to java.lang.Object, which matches any type.

	Tapestry does not currently use this value; it may eventually be phased out
	(or maintained only for documentation purposes).

	Used in: parameter
	-->
<!ELEMENT java-type (#PCDATA)>

	<!--
	The string name of some element.

	Used in: application binding external-asset inherited-binding 
			 internal-asset private-asset property static-binding
	-->
<!ELEMENT name (#PCDATA)>

	<!--
	Defines a single page used in the application.  This establishes a globally
	unique name for the page, and identifies the specification used to
	instantiate the page.

	Used in: application
	-->
<!ELEMENT page (name, buffer-size?, specification-path, property*)>

	<!--
	Defines a parameter that may be bound to a component.

	Used in: specification
	-->
<!ELEMENT parameter (name, java-type?, required?)>

	<!--
	The path, within the servlet context, of the asset.

	Used in: internal-asset
	-->
<!ELEMENT path (#PCDATA)>

	<!--
	The name of a parameter of the component being specified.

	Used in: inherited-binding
	-->
<!ELEMENT parameter-name (#PCDATA)>

	<!--
	A named property used for special client configuration.

	Used in: application component page specification
	-->
<!ELEMENT property (name, value)>

	<!--
	The name of a JavaBeans property of some object, or a 'path' of such
	names, seperated by periods.

	Used in: binding
	-->
<!ELEMENT property-path (#PCDATA)>


	<!--
	Indicates whether a parameter is optional or required.  If not specified,
	optional is assumed.

	The value should be convertable to a boolean value.  See notes above.

	Used in: parameter
	-->
<!ELEMENT required (#PCDATA)>

	<!--
	Identifies an internal asset, a resource usually packaged with the application
	classes in a Jar file.

	Used in: specification
	-->
<!ELEMENT private-asset (name, resource-path)>

	<!--
	The path, within the classpath, of a resource.

	Used in: private-asset
	-->
<!ELEMENT resource-path (#PCDATA)>

	<!--
	A read-only binding to a static (String) value.

	Used in: component
	-->
<!ELEMENT static-binding (name, value)>

	<!--
	The root element of a component specification file.
	-->
<!ELEMENT specification (class, allow-body?, allow-informal-parameters?
		parameter*, component*,
		(external-asset?, internal-asset?, private-asset?)*,
		property*)>
		
	<!--
	The path of the specification file used to fully define the page or
	component alias.

	Used in: page component-alias
	-->
<!ELEMENT specification-path (#PCDATA)>

	<!--
	The type of a contained component.  This may either be the path
	of its specification file, or a well-known alias for the component
	(either a built-in Tapestry component, or as defined in the 
	application specification).

	Used in: component
	-->
<!ELEMENT type (#PCDATA)>

	<!--
	The complete URL of an external asset.

	Used in: external-asset
	-->
<!ELEMENT URL (#PCDATA)>

	<!--
	The string value for a named property.

	Used in: property static-binding
	-->
<!ELEMENT value (#PCDATA)>
