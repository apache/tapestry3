<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id$ -->

<mock-test>
    <context name="c6" root="context6"/>

  	<servlet name="app" class="net.sf.tapestry.ApplicationServlet">
  		<init-parameter name="net.sf.tapestry.engine-class"
  					value="net.sf.tapestry.junit.mock.c6.C6Engine"/>
  	</servlet>
       
    <request>
 		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Page Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Initial Message">
Message: Hello
 		</assert-output>
 		
 		<assert-output name="Initial Active Page Names">
Active page names: [] 		
		</assert-output>
			
		<assert-output name="Change Message Link">
<![CDATA[		
/c6/app?service=direct&amp;context=0/Home/$DirectLink		
]]>
		</assert-output>				
		
		<assert-expression name="Check No Session"
			expression="request.session == null"/>
 	</request>
			
	<!-- Now, trigger the link. -->
	
	<request>
		<parameter name="service" value="direct"/>
		<parameter name="context" value="0/Home/$DirectLink"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Page Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Changed Message">
Message: Changed
 		</assert-output>
 		
 		<assert-output name="Active Page Names">
Active page names: [Home] 		
		</assert-output>
								
		<assert name="Session Attribute">
	    request.session.getAttribute("app/Home/message").equals("Changed")
		</assert>
					
	</request>
	
	<!-- Return to the page, check for the change.  -->
	
	<request>
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Page Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Changed Message">
Message: Changed
 		</assert-output>
 		
 		<assert-output name="Active Page Names">
Active page names: [Home] 		
		</assert-output>
	</request>
	
	<!-- Simulate a failover. -->
	
	<request failover="true">		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Page Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Changed Message">
Message: Changed
 		</assert-output>
 		
 		<assert-output name="Active Page Names">
Active page names: [Home] 		
		</assert-output>
	</request>
				
	<!-- Now try page "Two", with the Nested component. -->
	
	<request>
		<parameter name="service" value="page"/>
		<parameter name="context" value="Two"/>

 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Component Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Initial Nested Message">
Nested Message: Nested
 		</assert-output>
 		
 		<assert-output name="Initial Active Page Names">
Active page names: [Home] 		
		</assert-output>
			
		<assert-output name="Change Message Link">
<![CDATA[		
/c6/app?service=direct&amp;context=1/Two/$Nested.$DirectLink		
]]>
		</assert-output>				

	</request>		
		
	<!-- Trigger the link in the nested component. -->
	
	<request>
		<parameter name="service" value="direct"/>
		<parameter name="context" value="1/Two/$Nested.$DirectLink"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Component Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Changed Nested Message">
Nested Message: Changed
 		</assert-output>
 		
 		<!-- This is going to be a little pain because we can't count on the
 		 	 ordering!  May need to put some kind of sort filter in place in the
 		 	 presentation.  -->
 		 	 
 		<assert-output name="Changed Active Page Names">
Active page names: [Home, Two] 		
		</assert-output>				
		
		<assert name="Session Attribute">
		request.session.getAttribute("app/Two/$Nested/message").equals("Changed")
		</assert>		
					
	</request>
	
	<!-- Check that it works on a revisit. -->
	
	<request>
		<parameter name="service" value="page"/>
		<parameter name="context" value="Two"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Component Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Changed Active Page Names">
Active page names: [Home, Two] 		
		</assert-output>	
		 		
 		<assert-output name="Changed Nested Message">
Nested Message: Changed
 		</assert-output>
	</request>
		
	<!-- Check that it works after a failover. -->
	
	<request failover="true">
		<parameter name="service" value="page"/>
		<parameter name="context" value="Two"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant Component Property</title>
]]> 		
 		</assert-output>
 		
 		<assert-output name="Changed Active Page Names">
Active page names: [Home, Two] 		
		</assert-output>	
		 		
 		<assert-output name="Changed Nested Message">
Nested Message: Changed
 		</assert-output>
	</request>	
	
	<!-- Now on to page Three, where we test EJBs. -->
	
	<request>
		<parameter name="service" value="page"/>
		<parameter name="context" value="Three"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant EJB Property</title>
]]> 		
 		</assert-output>	
 		
		<assert-output name="EJB Initial Value">
EJB is null
		</assert-output>
		
		<assert-output name="Create link">
<![CDATA[
/c6/app?service=direct&amp;context=1/Three/$DirectLink
]]>		
		</assert-output>		 			
				
	</request>
	
	<!-- Trigger the link. -->
	
	<request>
		<parameter name="service" value="direct"/>
		<parameter name="context" value="1/Three/$DirectLink"/>

 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant EJB Property</title>
]]> 		
 		</assert-output>
 				

		<assert-output name="Updated EJB Value">
EJB is FakeEJBObject[997]
		</assert-output>			
				
		<assert name="Stored Value">
		request.session.getAttribute("app/Three/ejb").getClass().getName().equals("net.sf.tapestry.record.EJBWrapper")
		</assert>
		
	</request>
	
	<!-- Now, pretend a failover. -->
	
	<request failover="true">
		<parameter name="service" value="page"/>
		<parameter name="context" value="Three"/>
					
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant EJB Property</title>
]]> 		
 		</assert-output>
 				

		<assert-output name="Updated EJB Value">
EJB is FakeEJBObject[997]
		</assert-output>			
				
		<assert-output name="Discard URL">
<![CDATA[
/c6/app?service=direct&amp;context=1/Three/$DirectLink_0
]]>
		</assert-output>
								
	</request>		
	
	<!-- Trigger the discard link. -->
	
	<request>
		<parameter name="service" value="direct"/>
		<parameter name="context" value="1/Three/$DirectLink_0"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant EJB Property</title>
]]> 		
 		</assert-output>

		<!-- Doesn't update the current state of the page! --> 				

		<assert-output name="Updated EJB Value">
EJB is FakeEJBObject[997]
		</assert-output>		
		
		<assert name="Attribute missing">
		request.session.getAttribute("app/Three/ejb") == null
		</assert>
		
	</request>
			
	<!-- Check that the value is now gone. -->
	
	<request>
		<parameter name="service" value="page"/>
		<parameter name="context" value="Three"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Peristant EJB Property</title>
]]> 		
 		</assert-output>	
 		
		<assert-output name="EJB Value back to null">
EJB is null
		</assert-output>
					
	</request>
				
	<!-- Now, test that all sorts of variations on fireObservedChange() work with
	     different overloaded types. -->
	     
	<request>
		<parameter name="service" value="page"/>
		<parameter name="context" value="Four"/>
		
 		<assert-output name="Page Title">
<![CDATA[
<title>Property Types</title>
]]> 		
 		</assert-output>	
 		
 		 <assert-output name="Boolean">
Boolean value: false		
 		</assert-output>
 		
 		<assert-output name="Char">
Char value: [ ]
		</assert-output>
		
 		 <assert-output name="Byte">
Byte value: 0		
 		</assert-output>
 		
 		 <assert-output name="Short">
Short value: 0		
 		</assert-output>
 		
 		 <assert-output name="Int">
Int value: 0		
 		</assert-output>
 		 		
 		 <assert-output name="Long">
Long value: 0		
 		</assert-output>
 		
 		 <assert-output name="Float">
Float value: 0.0		
 		</assert-output>
 		
 		 <assert-output name="Double">
Double value: 0.0	
 		</assert-output>
 		
 		<assert-output name="StringHolder">
StringHolder value: []
		</assert-output> 		
 		
 		<assert-output name="Create Link">
<![CDATA[
/c6/app?service=direct&amp;context=1/Four/$DirectLink
]]>	
		</assert-output>
		
 	</request>			     									
 	
 	
 	<!-- Trigger the link to create values. -->
 	
 	<request>
 		<parameter name="service" value="direct"/>
 		<parameter name="context" value="1/Four/$DirectLink"/>
 		
 		<assert-output name="Page Title">
<![CDATA[
<title>Property Types</title>
]]> 		
 		</assert-output>	
 		
 		 <assert-output name="Boolean">
Boolean value: true
 		</assert-output>
 		
 		<assert-output name="Char">
Char value: [H]
		</assert-output>
		
 		 <assert-output name="Byte">
Byte value: 27
 		</assert-output>
 				
 		 <assert-output name="Short">
Short value: 127
 		</assert-output>
 		
 		 <assert-output name="Int">
Int value: 23		
 		</assert-output>
 		 		
 		 <assert-output name="Long">
Long value: 1234567890123		
 		</assert-output>
 		
 		 <assert-output name="Float">
Float value: -1.5		
 		</assert-output>
 		
 		 <assert-output name="Double">
Double value: 3.142857142857143	
 		</assert-output>

 		<assert-output name="StringHolder">
StringHolder value: [StringHolder[Surprise!]]
		</assert-output> 	
	</request>
	
	<!-- And return to ensure that values are properly restored. -->
	
	<request failover="true">
		<parameter name="service" value="page"/>
		<parameter name="context" value="Four"/>
		
 		 <assert-output name="Boolean">
Boolean value: true
 		</assert-output>
 		
 		<assert-output name="Char">
Char value: [H]
		</assert-output>
		
 		 <assert-output name="Byte">
Byte value: 27
 		</assert-output>
 				
 		 <assert-output name="Short">
Short value: 127
 		</assert-output>

 		 <assert-output name="Int">
Int value: 23		
 		</assert-output>
 		 		
 		 <assert-output name="Long">
Long value: 1234567890123		
 		</assert-output>
 		
 		 <assert-output name="Float">
Float value: -1.5		
 		</assert-output>
 		
 		 <assert-output name="Double">
Double value: 3.142857142857143	
 		</assert-output>	
 		
 		<assert-output name="StringHolder">
StringHolder value: [StringHolder[Surprise!]]
		</assert-output> 	 			
	</request>
	
</mock-test>
    	
