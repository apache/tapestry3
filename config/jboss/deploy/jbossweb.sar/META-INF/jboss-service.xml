<?xml version="1.0" encoding="UTF-8"?>

<server>

  <!-- ==================================================================== -->
  <!-- Web Container                                                        -->
  <!-- ==================================================================== -->

  <!--
     | Be sure to check that the configuration values are valid for your
     | environment.
   -->

  <mbean code="org.jboss.jetty.JettyService" name="jboss.web:service=JBossWeb">

    <!-- ================================================================= -->
    <!-- Your webdefault.xml file - The default settings for every webapp  -->
    <!-- deployed by Jetty. Make systemwide changes here to your webapps   -->
    <!-- configurations.                                                   -->
    <!-- ================================================================= -->

    <attribute name="WebDefaultResource">webdefault.xml</attribute>

    <!-- ================================================================== -->
    <!-- If true, .war files are unpacked to a temporary directory. This    -->
    <!-- is useful with JSPs.                                               -->
    <!-- ================================================================== -->

    <attribute name="UnpackWars">true</attribute>

    <!-- ================================================================== -->
    <!-- If true, Jetty first delegates loading a class to the webapp's     -->
    <!-- parent class loader (a la Java 2). If false, Jetty follows the     -->
    <!--  Servlet 2.3 specification, and tries the webapp's own loader      -->
    <!-- first (for "non-system" classes)                                   -->
    <!-- ================================================================== -->

    <attribute name="Java2ClassLoadingCompliance">true</attribute>

    <!-- ================================================================= -->
    <!-- Configuring Jetty. The XML fragment contained in the              -->
    <!-- name="ConfigurationElement" attribute is a Jetty-style            -->
    <!-- configuration specification.  It is used to configure Jetty with  -->
    <!-- a listener on port 8080, and a HTTP request log location.         -->
    <!-- The placement here of other Jetty XML configuration statements    -->
    <!-- for deploying webapps etc is not encouraged: if you REALLY NEED   -->
    <!-- something extra, place it in WEB-INF/jetty-web.xml files          -->
    <!-- ================================================================= -->

    <attribute name="ConfigurationElement">
      <Configure class="org.mortbay.jetty.Server">

       <!-- =============================================================== -->
       <!-- Configure the Request Listeners                                 -->
       <!-- =============================================================== -->


       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <!-- Add and configure a HTTP listener to port 80                    -->
       <!-- The default port can be changed using: java -Djetty.port=80     -->
       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <Call name="addListener">
         <Arg>
          <New class="org.mortbay.http.SocketListener">
            <Set name="Port"><SystemProperty name="jetty.port" default="80"/></Set>
            <Set name="MinThreads">5</Set>
            <Set name="MaxThreads">100</Set>
            <Set name="MaxIdleTimeMs">30000</Set>
            <Set name="LowResourcePersistTimeMs">5000</Set>
          </New>
         </Arg>
       </Call>


       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <!-- Add a HTTPS SSL listener on port 8843                           -->
       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <!-- UNCOMMENT TO ACTIVATE
       <Call name="addListener">
         <Arg>
           <New class="org.mortbay.http.SunJsseListener">
            <Set name="Port">8443</Set>
            <Set name="MinThreads">5</Set>
            <Set name="MaxThreads">100</Set>
            <Set name="MaxIdleTimeMs">30000</Set>
            <Set name="LowResourcePersistTimeMs">2000</Set>
            <Set name="Keystore"><SystemProperty name="jetty.home" default="."/>/etc/demokeystore</Set>
            <Set name="Password">OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4</Set>
            <Set name="KeyPassword">OBF:1u2u1wml1z7s1z7a1wnl1u2g</Set>
           </New>
         </Arg>
       </Call>
       -->


       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <!-- Add a AJP13 listener on port 8009                               -->
       <!-- This protocol can be used with mod_jk in apache, IIS etc.       -->
       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <Call name="addListener">
         <Arg>
           <New class="org.mortbay.http.ajp.AJP13Listener">
            <Set name="Port">8009</Set>
            <Set name="MinThreads">5</Set>
            <Set name="MaxThreads">255</Set>
            <Set name="MaxIdleTimeMs">30000</Set>
            <Set name="confidentialPort">443</Set>
           </New>
         </Arg>
       </Call>

		 <!-- Private assets are exposed by copying them to the
		      specifyed directory and building a URI to the
		      specified virtual folder. -->
		      
   <Call name="addContext">
    <Arg>/private/*</Arg>
    <Set name="ResourceBase">../server/tapestry/tmp/private</Set>
    
    <Call name="addHandler">
      <Arg><New class="org.mortbay.http.handler.ResourceHandler"/></Arg>
    </Call>
    
    <Call name="addHandler">
    	<Arg><New class="org.mortbay.http.handler.NotFoundHandler"/></Arg>
    </Call>
  </Call>

       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <!-- Add and configure a NIO HTTP listener to port 8888              -->
       <!-- This listener should be used to replace the standard HTTP       -->
       <!-- listener when deployed on LARGE systems using jdk 1.4           -->
       <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
       <!-- UNCOMMENT TO ACTIVATE
       <Call name="addListener">
         <Arg>
           <New class="org.mortbay.http.SocketChannelListener">
            <Set name="Port"><SystemProperty name="jetty.port" default="8888"/></Set>
            <Set name="MinThreads">5</Set>
            <Set name="MaxThreads">500</Set>
            <Set name="MaxIdleTimeMs">30000</Set>
           </New>
         </Arg>
       </Call>
       -->
       <!-- =============================================================== -->
       <!-- Configure the Request Log                                       -->
       <!-- =============================================================== -->
       <Set name="RequestLog">
         <New class="org.mortbay.http.NCSARequestLog">
           <Arg><SystemProperty name="jboss.server.home.dir"/><SystemProperty name="jetty.log" default="/log"/>/yyyy_mm_dd.request.log
           </Arg>
           <Set name="retainDays">90</Set>
           <Set name="append">true</Set>
           <Set name="extended">true</Set>
           <Set name="LogTimeZone">GMT</Set>
         </New>
       </Set>

       <!-- ======================================================= -->
       <!-- New Distributed Session Manager                         -->
       <!-- (This will all soon be published via JMX interface too) -->
       <!-- ======================================================= -->

       <Set name="DistributableHttpSessionManagerClass">org.mortbay.j2ee.session.Manager</Set>

      <!-- THESE ARE ALTERNATIVES - uncomment one and it will be used as the default -->

      <!-- this interceptor stack is for an EXTENDED session using JavaGroups -->
      <!-- you will need the 'all' config -->
      <Set name="DistributableHttpSessionStoreClass">org.mortbay.j2ee.session.JGStore</Set>
      <Set name="DistributableHttpSessionInterceptorClasses">
       <New class="java.util.ArrayList">
        <Call name="add"><Arg>org.mortbay.j2ee.session.ValidationInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.TypeCheckingInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.BindingInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.MarshallingInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.SynchronizationInterceptor</Arg></Call>
       </New>
      </Set>
     <!--
     -->

     <!-- this interceptor stack is for an EXTENDED session using a CMP EJB -->
     <!-- you will need to setup the dds in jbossweb-ejbs.jar, according to your installation -->
     <!--
     <Set name="DistributableHttpSessionStoreClass">org.mortbay.j2ee.session.CMPStore</Set>
      <Set name="DistributableHttpSessionInterceptorClasses">
       <New class="java.util.ArrayList">
        <Call name="add"><Arg>org.mortbay.j2ee.session.TransactionInterceptor</Arg></Call>
        <Call name="add"><Arg>org.jboss.jetty.session.SecurityInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.ValidationInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.TypeCheckingInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.BindingInterceptor</Arg></Call>
        <Call name="add"><Arg>org.mortbay.j2ee.session.MarshallingInterceptor</Arg></Call>
       </New>
      </Set>
     -->

      <!-- For testing DistributableHttpSessionManager with Watchdog -->
      <!--
       <Set name="Distributable">true</Set>
      -->

       <!-- ====================================== -->
       <!-- also needed for distributable sessions -->
       <!-- ====================================== -->

       <!--
       These can be set on a per webapp basis in WEB-INF/jetty-web.xml
       -->

       <!--
       If someone specifies -1 for their maxInactiveInterval - how
       long should we REALLY leave the session before GC ? a week,
       a year, ... (in seconds) - a week
       -->
       <Set name="HttpSessionActualMaxInactiveInterval">604800</Set>

       <!--
       How regularly should we GC locally held distributable sessions ?
       (in seconds)... - every 10 mins
       -->
       <Set name="LocalHttpSessionScavengePeriod">600</Set>

       <!--
       How regularly should we GC distributable sessions with no
       locally held counterpart (in seconds)? - 1 hour
       -->
       <Set name="DistributableHttpSessionScavengePeriod">3600</Set>

       <!--
       How much older than it's maxInactiveInterval should the
       distributable counterpart of a session be, before it is
       GC-ed by the ditributable-scavenger ? This should always be
       MORE than the local scavenge period, so that a session is
       GC-ed locally first.(in seconds) - every 15 mins
       -->
       <Set name="DistributableHttpSessionScavengeOffset">900</Set>

      </Configure>
     </attribute>

    <!-- ================================================================= -->
    <!-- If you require JAAS authentication, configure the name of the     -->
    <!-- attribute in which you expect to find the JAAS active subject:    -->
    <!--                                                                   -->
    <!-- Commenting out this configuration will disable JAAS support       -->
    <!-- ================================================================= -->

    <attribute name="SubjectAttributeName">j_subject</attribute>

  </mbean>

  <!-- ==================================================================== -->
  <!-- ==================================================================== -->

</server>
