<?xml version="1.0"?>
<!-- $Id$ -->
<!DOCTYPE script PUBLIC "-//Howard Ship//Tapestry Script 1.1//EN"
	"http://tapestry.sf.net/dtd/Script_1_1.dtd">
<script>
  <!-- 

input symbols:

formName - the name of the form containing this Palette
name - the name of the selected element
includeBaseFunctions - if true, then include the base functions; this is true for the first
  Palette rendered on a page, false subsequently
sortLabel - if true, sort options by label
sortValue - if true, sort options by value
sortUser - if create additional controls to allow user to sort manually
selectImage - reference to the select image
selectDisabledImage - referece to the disabled select image  
deselectImage - reference to the deselect image
deselectDisabledImage - reference to the disbled deselect image
upImage - reference to the move up image
upDisabledImage - reference to the disabled move up image
downImage - reference to the move down image
downDisabledImage - reference to the disabled move down image

Note: "reference" means the result of Body.getPreloadedImageReference().  The
up and down images are only needed if sortUser is true.

output symbols:
  formSubmitFunctionName - name of a function to be executed when the form submits
  availableName - the name of the available element
  selectImageName - the name to use for the select image (inside the select link)
  selectOnClickScript - the script to assign to the select link's onclick attribute
  deselectOnClickScript - the script to assign to the deselect link's onclick attribute
  deselectImageName - the name to use for the deselect image (inside the deselect link)
  upImageName - the name of the up image (inside the up link)
  downImageName the name of the move down image (inside the down link)
  upOnClickScript - the script to assign to the up link's onclick attribute
  downOnClickScript - the script to assign to the down link's onclick attribute
-->

<!-- baseName - base name from which other names are generated -->

<let key="baseName">
  <insert property-path="formName"/>_<insert property-path="name"/>
</let>

<let key="buttons">
  buttons_<insert property-path="baseName"/>
</let>

<let key="selectDisabled">
  <insert property-path="buttons"/>.selectDisabled
</let>

<let key="deselectDisabled">
  <insert property-path="buttons"/>.deselectDisabled
</let>

<let key="upDisabled">
  <insert property-path="buttons"/>.upDisabled
</let>

<let key="downDisabled">
  <insert property-path="buttons"/>.downDisabled
</let>

<let key="availableName">
  <insert property-path="name"/>_avail
</let>

<let key="updateFunctionName">
  update_<insert property-path="baseName"/>
</let>

<let key="selectFunctionName">
  select_<insert property-path="baseName"/>
</let>

<let key="selectOnClickScript">
  javascript:<insert property-path="selectFunctionName"/>();
</let>

<let key="deselectFunctionName">
  deselect_<insert property-path="baseName"/>
</let>

<let key="deselectOnClickScript">
  javascript:<insert property-path="deselectFunctionName"/>();
</let>

<let key="formSubmitFunctionName">
  onsubmit_<insert property-path="baseName"/>
</let>

<let key="selectImageName">
  selectimage_<insert property-path="baseName"/>
</let>

<let key="selectImagePath">
  document.<insert property-path="selectImageName"/>
</let>

<let key="deselectImageName">
  deselectimage_<insert property-path="baseName"/>
</let>

<let key="deselectImagePath">
  document.<insert property-path="deselectImageName"/>
</let>

<let key="formPath">
  document.<insert property-path="formName"/>
</let>

<let key="selectedPath">
    <insert property-path="formPath"/>.<insert property-path="name"/>
</let>

<let key="availablePath">
    <insert property-path="formPath"/>.<insert property-path="availableName"/>
</let>

<let key="upImageName">
  upimage_<insert property-path="baseName"/>
</let>

<let key="upImagePath">
  document.<insert property-path="upImageName"/>
</let>

<let key="downImageName">
  downimage_<insert property-path="baseName"/>
</let>

<let key="downImagePath">
  document.<insert property-path="downImageName"/>
</let>

<let key="moveUpFunctionName">
  moveup_<insert property-path="baseName"/>
</let>

<let key="upOnClickScript">
  javascript:<insert property-path="moveUpFunctionName"/>();
</let>

<let key="moveDownFunctionName">
  movedown_<insert property-path="baseName"/>
</let>

<let key="downOnClickScript">
  javascript:<insert property-path="moveDownFunctionName"/>();
</let>

<body>
<if property-path="includeBaseFunctions">

var palette_is_NN4 = 
<![CDATA[  (navigator.appName == "Netscape" &&
  parseInt(navigator.appVersion) <= 4);
]]>

function palette_clear_selections(element)
{
  var options = element.options;
  
  for (var i = 0; i &lt; options.length; i++)
    options[i].selected = false;
}

function palette_select_all(element)
{
  var options = element.options;

  for (var i = 0; i &lt; options.length; i++)
    options[i].selected = true;
}

function palette_sort(element, sorter)
{
  var options = element.options;
  var list = new Array();
  var index = 0;
  
  while (options.length &gt; 0)
  {
    if (palette_is_NN4)
    {
      var copy = new Option(options[0].text, options[0].value);
      list[index++] = copy;
    }
    else
      list[index++] = options[0];
      
    options[0] = null;
  }
  
  list.sort(sorter);
  
  for (var i = 0; i &lt; list.length; i++)
    options[options.length] = list[i]; 
}

function palette_label_sorter(a, b)
{
  var a_text = a.text;
  var b_text = b.text;
  
  if (a_text == b_text)
    return 0;
    
  if (a_text &lt; b.text)
    return -1;
    
  return 1;
}

function palette_sort_by_label(element)
{
  palette_sort(element, palette_label_sorter);
}

function palette_value_sorter(a, b)
{
  var a_value = a.value;
  var b_value = b.value;
  
  if (a_value == b_value)
    return 0;
    
  if (a_value &lt; b_value)
    return -1;
    
  return 1;
}

function palette_sort_by_value(element)
{
  palette_sort(element, palette_value_sorter);
}
  
function palette_transfer_selections(source, target)
{
  var sourceOptions = source.options;
  var targetOptions = target.options;
  
  var targetIndex = target.selectedIndex;
  var offset = 0;
  
  palette_clear_selections(target);
  
  for (var i = 0; i &lt; sourceOptions.length; i++)
  {
    var option = sourceOptions[i];
    
    if (option.selected)
    {
   	  if (palette_is_NN4)
   	  {
   	  	  // Can't share options between selects in NN4
   	  	  
   	  	  var newOption = new Option(option.text, option.value, false, true);
		  sourceOptions[i] = null;
		  
          // Always added to end in NN4
             	  	  
          targetOptions[targetOptions.length] = newOption;
   	  }
   	  else
   	  {  
         sourceOptions.remove(i);
         
        if (targetIndex &lt; 0)
          targetOptions.add(option);
        else
          targetOptions.add(option, targetIndex + offset++);
      }
      

      i--;
    }
  }

}

function palette_swap_options(options, selectedIndex, targetIndex)
{
  var option = options[selectedIndex];

  // It's very hard to reorder options in NN4
  
  if (palette_is_NN4)
  {
    var swap = options[targetIndex];
    
    var hold = swap.text;
    swap.text = option.text;
    option.text = hold;
    
    hold = swap.value;
    swap.value = option.value;
    option.value = hold;
    
    hold = swap.selected;
    swap.selected = option.selected;
    option.selected = hold;
    
    // defaultSelected isn't relevant to the Palette
    
    return;
  }
  
  // Sensible browsers ...
  
  options.remove(selectedIndex);
  options.add(option, targetIndex);
}

</if>

<!-- A variable that is used to track which of the buttons are enabled
     or disabled. -->
     
var <insert property-path="buttons"/> = new Object();
<insert property-path="selectDisabled"/> = true;
<insert property-path="deselectDisabled"/> = true;
<if property-path="sortUser">
<insert property-path="upDisabled"/> = true;
<insert property-path="downDisabled"/> = true;
</if>

function <insert property-path="updateFunctionName"/>()
{
  var disabled = <insert property-path="availablePath"/>.selectedIndex &lt; 0;
  
  <insert property-path="selectDisabled"/> = disabled;
 
  if (document.images)
    <insert property-path="selectImagePath"/>.src =
      disabled ? <insert property-path="selectDisabledImage"/>
               : <insert property-path="selectImage"/>;

  var selected = <insert property-path="selectedPath"/>;
  var index = selected.selectedIndex;

  disabled = index &lt; 0;
  <insert property-path="deselectDisabled"/> = disabled;
 
  if (document.images)
    <insert property-path="deselectImagePath"/>.src =
  	  disabled ? <insert property-path="deselectDisabledImage"/>
               : <insert property-path="deselectImage"/>;
  			 
<if property-path="sortUser">

  var upImage = <insert property-path="upImagePath"/>;
  var downImage = <insert property-path="downImagePath"/>
  
  <insert property-path="upDisabled"/> = true;
  <insert property-path="downDisabled"/> = true;
  
  if (document.images)
  {
    upImage.src = <insert property-path="upDisabledImage"/>;
    downImage.src = <insert property-path="downDisabledImage"/>;
  }
  
  <!-- If there's no selection in the "selected" column, then leave
       both buttons disabled. -->
       
  if (disabled)
  	return;
 
  <!-- Search for a second selected item -->
  
  for (var i = index + 1; i &lt; selected.options.length; i++)
  {
    <!-- Found a second selected option, so leave buttons disabled. -->
    if (selected.options[i].selected)
	  return;
  }
  
  <insert property-path="upDisabled"/> = (index == 0);
  <insert property-path="downDisabled"/> = (index == selected.options.length - 1);  
  
  if (document.images)
  {
    if (!<insert property-path="upDisabled"/>)
      upImage.src = <insert property-path="upImage"/>;

    if (!<insert property-path="downDisabled"/>)
      downImage.src = <insert property-path="downImage"/>;
  }
</if>  
}

function <insert property-path="selectFunctionName"/>()
{
   if (<insert property-path="selectDisabled"/>)
  	return;
  	
  var source = <insert property-path="availablePath"/>;
  var target = <insert property-path="selectedPath"/>;
   	
  palette_transfer_selections(source, target);
  
<if property-path="sortLabel">
  palette_sort_by_label(target);
</if>
<if property-path="sortValue">
  palette_sort_by_value(target);
</if>
  <insert property-path="updateFunctionName"/>();
}

function <insert property-path="deselectFunctionName"/>()
{
  if (<insert property-path="deselectDisabled"/>)
    return;
  
  var source = <insert property-path="selectedPath"/>;
  var target = <insert property-path="availablePath"/>;
  
  palette_transfer_selections(source, target);
  
<if property-path="sortLabel">
  palette_sort_by_label(target);
</if>
<if property-path="sortValue">
  palette_sort_by_value(target);
</if>
  <insert property-path="updateFunctionName"/>();  
}

function <insert property-path="formSubmitFunctionName"/>()
{
  palette_clear_selections(<insert property-path="availablePath"/>);
  palette_select_all(<insert property-path="selectedPath"/>);
  
  return true;
}


<if property-path="sortUser">
function <insert property-path="moveUpFunctionName"/>()
{
  if (<insert property-path="upDisabled"/>)
    return;
    
  var element = <insert property-path="selectedPath"/>;
  var options = element.options;
    
  palette_swap_options(options, element.selectedIndex, element.selectedIndex - 1);
  
  <insert property-path="updateFunctionName"/>();
}

function <insert property-path="moveDownFunctionName"/>()
{
  if (<insert property-path="downDisabled"/>)
    return;
    
  var element = <insert property-path="selectedPath"/>;
  var options = element.options;
  
  palette_swap_options(options, element.selectedIndex, element.selectedIndex + 1);
  
  <insert property-path="updateFunctionName"/>();
}
</if>

</body>

<initialization>

<insert property-path="selectedPath"/>.onchange = <insert property-path="updateFunctionName"/>;
<insert property-path="selectedPath"/>.ondblclick = <insert property-path="deselectFunctionName"/>;
<insert property-path="availablePath"/>.onchange = <insert property-path="updateFunctionName"/>;
<insert property-path="availablePath"/>.ondblclick = <insert property-path="selectFunctionName"/>;

<insert property-path="updateFunctionName"/>();

</initialization>
</script>
